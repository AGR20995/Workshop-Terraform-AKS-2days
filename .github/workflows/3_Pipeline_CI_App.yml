name: 3 - Worflow CI Application


on:
  workflow_dispatch:

env:
  REGISTRY_NAME: "acrpierrc007"
  APP_NAME: "coolapi"
  IMAGE_VERSION: "1.0.0"

jobs:

  analyze-code: # You can use CodeQL to identify vulnerabilities and errors in your code. The results are shown as code scanning alerts in GitHub https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/about-code-scanning-with-codeql
    runs-on: ubuntu-latest
    permissions: # 
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'javascript' ]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v1
      with:
        languages: ${{ matrix.language }}

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v1

  test-unitaire: # Deuxieme job "tests unitaires"
    runs-on: ubuntu-latest 
    needs: analyze-code # Declenchement du Job "test-unitaire" si le job "analyze-code" s"execute sans erreur 
    strategy:
      matrix:
        node-version: [10.x, 12.x, 14.x, 15.x]

    steps:
      - name: Checkout repo
        uses: actions/checkout@v2

      - name: Use Node.js
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}

      - name: Installation des dependences
        run : |
          cd API && npm install

      - name: Tests unitaires
        run: |
          cd API && npm test

  build-scan-push:
    runs-on: ubuntu-latest 
    needs: test-unitaire

    steps:
      - name: Checkout repo
        uses: actions/checkout@v2

      - name: Build de l'image de l'application
        run: |
          cd API && docker build . -t ${{ env.REGISTRY_NAME}}.azurecr.io/${{ env.APP_NAME }}:${{ env.IMAGE_VERSION }}

      - name: Scan Image
        uses: Azure/container-scan@v0 
        id: container-scan
        continue-on-error: true
        with:
          image-name: ${{ env.REGISTRY_NAME}}.azurecr.io/${{ env.APP_NAME }}:${{ env.IMAGE_VERSION }}         

      - name: Login Azure Container Registry
        run: |
          docker login acrpierrc007.azurecr.io --username ${{ secrets.CLIENTID}} --password ${{ secrets.CLIENTSECRET }}

      - name: Push de l'image de l'application
        run: |
          cd API && docker push ${{ env.REGISTRY_NAME}}.azurecr.io/${{ env.APP_NAME }}:${{ env.IMAGE_VERSION }}


        


          


